[package]
name = "rustic-ai"
version = "0.1.1"
edition = "2021"
authors = ["yyassif <y.yassif@edu.umi.ac.ma>"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
actix-files = { version = "0.6", optional = true }
actix-web = { version = "4", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1"
http = { version = "1.0.0", optional = true }
leptos = { version = "0.6" }
leptos_meta = { version = "0.6" }
cfg-if = "1"
leptos_actix = { version = "0.6", optional = true }
leptos_router = { version = "0.6" }
uuid = { version = "1.10.0", features = ["v4", "serde", "fast-rng", "macro-diagnostics"] }
pulldown-cmark = "0.12.1"
wasm-bindgen = "=0.2.93"
serde = { version = "1.0.183", features = ["derive"] }
rand = { version = "0.8.5", optional = true }
env_logger = "0.11.5"
dotenv ={ version = "0.15.0", optional = true }
actix-ws = { version = "0.3.0", optional = true }
actix-rt = { version = "2.10.0", optional = true }
futures = { version = "0.3", optional = true }
futures-util = "0.3"
gloo-net = { version = "0.6.0"}
ollama-rs = { version = "0.2.0", features = ["stream"], optional = true }
tokio = { version = "1", features = [ "full" ], optional = true }
chrono = { version = "0.4" }

[dependencies.web-sys]
version = "0.3.22"
features = [ "console", "Clipboard", "Window", "Navigator", "Permissions" ]

[features]
csr = ["leptos/csr", "leptos_meta/csr", "leptos_router/csr"]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate", "gloo-net/websocket", "dep:futures"]
ssr = ["dep:actix-files", "dep:actix-web", "dep:leptos_actix", "leptos/ssr", "leptos_meta/ssr", "leptos_router/ssr", "dep:rand", "dep:dotenv", "dep:actix-ws", "dep:actix-rt", "dep:futures", "dep:ollama-rs", "dep:tokio"]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "rustic-ai"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
